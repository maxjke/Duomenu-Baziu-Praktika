// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(PlatformDbContext))]
    [Migration("20240503174902_asdasd")]
    partial class asdasd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DAL.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("Advertisement", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Advertisement_CourseId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Advertisement");
                });

            modelBuilder.Entity("Certificate", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("CertificateDegree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Certificate_CourseId");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Certificate_ExpireDate");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Certificate");
                });

            modelBuilder.Entity("DAL.Models.BillingInformation", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("BillingInformation");
                });

            modelBuilder.Entity("DAL.Models.CareerCenter", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.HasDiscriminator().HasValue("CareerCenter");
                });

            modelBuilder.Entity("DAL.Models.Company", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("DAL.Models.CompanyOffer", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("CareerCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("OfferInformation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("CareerCenterId");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("CompanyOffer");
                });

            modelBuilder.Entity("DAL.Models.Consultation", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("ConsultationDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Consultation_Duration");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Consultation_StudentId");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("Consultation_TeacherId");

                    b.HasDiscriminator().HasValue("Consultation");
                });

            modelBuilder.Entity("DAL.Models.ContactInfo", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("ContactInfo");
                });

            modelBuilder.Entity("DAL.Models.Course", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Course");
                });

            modelBuilder.Entity("DAL.Models.CourseSources", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InformationSourceId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("InformationSourceId");

                    b.HasDiscriminator().HasValue("CourseSources");
                });

            modelBuilder.Entity("DAL.Models.Grade", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Grade_StudentId");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Grade");
                });

            modelBuilder.Entity("DAL.Models.Group", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Group_CourseId");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("DAL.Models.InformationSource", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("InformationSourceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InformationSourceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("InformationSource");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("DAL.Models.PaymentMethod", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("BillingInformationId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("BillingInformationId");

                    b.HasIndex("OrderId");

                    b.HasDiscriminator().HasValue("PaymentMethod");
                });

            modelBuilder.Entity("DAL.Models.Schedule", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<string>("LectureDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LectureTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Schedule");
                });

            modelBuilder.Entity("Lecture", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Lecture_CourseId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Lecture_Description");

                    b.Property<string>("LectureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("longtext");

                    b.HasIndex("CourseId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Lecture");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasIndex("ConsultationId")
                        .IsUnique();

                    b.HasIndex("ContactInfoId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.HasBaseType("DAL.Models.Entity");

                    b.Property<int?>("ConsultationId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_ConsultationId");

                    b.Property<int?>("ContactInfoId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_ContactInfoId");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_CourseId");

                    b.HasIndex("ConsultationId")
                        .IsUnique();

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Advertisement", b =>
                {
                    b.HasOne("DAL.Models.Course", "Course")
                        .WithOne("Advertisement")
                        .HasForeignKey("Advertisement", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Certificate", b =>
                {
                    b.HasOne("DAL.Models.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("Certificate", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DAL.Models.CompanyOffer", b =>
                {
                    b.HasOne("DAL.Models.CareerCenter", "CareerCenter")
                        .WithMany("CompanyOffers")
                        .HasForeignKey("CareerCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Company", "Company")
                        .WithMany("CompanyOffers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerCenter");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DAL.Models.ContactInfo", b =>
                {
                    b.HasOne("Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DAL.Models.CourseSources", b =>
                {
                    b.HasOne("DAL.Models.Course", "Course")
                        .WithMany("CourseSources")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.InformationSource", "InformationSource")
                        .WithMany("CourseSources")
                        .HasForeignKey("InformationSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InformationSource");
                });

            modelBuilder.Entity("DAL.Models.Grade", b =>
                {
                    b.HasOne("Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.Group", b =>
                {
                    b.HasOne("DAL.Models.Course", "Course")
                        .WithOne("Group")
                        .HasForeignKey("DAL.Models.Group", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DAL.Models.PaymentMethod", b =>
                {
                    b.HasOne("DAL.Models.BillingInformation", "BillingInformation")
                        .WithMany()
                        .HasForeignKey("BillingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingInformation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lecture", b =>
                {
                    b.HasOne("DAL.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Schedule", "Schedule")
                        .WithOne("Lecture")
                        .HasForeignKey("Lecture", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("DAL.Models.Consultation", "Consultation")
                        .WithOne("Student")
                        .HasForeignKey("Student", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ContactInfo", "ContactInfo")
                        .WithOne("Student")
                        .HasForeignKey("Student", "ContactInfoId");

                    b.HasOne("DAL.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("ContactInfo");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.HasOne("DAL.Models.Consultation", "Consultation")
                        .WithOne("Teacher")
                        .HasForeignKey("Teacher", "ConsultationId");

                    b.HasOne("DAL.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId");

                    b.HasOne("DAL.Models.Course", "Course")
                        .WithOne("Teacher")
                        .HasForeignKey("Teacher", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("ContactInfo");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DAL.Models.CareerCenter", b =>
                {
                    b.Navigation("CompanyOffers");
                });

            modelBuilder.Entity("DAL.Models.Company", b =>
                {
                    b.Navigation("CompanyOffers");
                });

            modelBuilder.Entity("DAL.Models.Consultation", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.ContactInfo", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Course", b =>
                {
                    b.Navigation("Advertisement");

                    b.Navigation("Certificate");

                    b.Navigation("CourseSources");

                    b.Navigation("Group")
                        .IsRequired();

                    b.Navigation("Lectures");

                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("DAL.Models.InformationSource", b =>
                {
                    b.Navigation("CourseSources");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("DAL.Models.Schedule", b =>
                {
                    b.Navigation("Lecture")
                        .IsRequired();
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
